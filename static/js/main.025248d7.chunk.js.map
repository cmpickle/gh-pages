{"version":3,"sources":["company.component.js","Banner.js","App.js","serviceWorker.js","index.js","assets/images/olympus.jpg","assets/images/profile.jpg"],"names":["Company","withStyles","image","width","height","objectFit","backgroundColor","content","whiteSpace","textAlign","roleStyle","color","card","margin","maxWidth","textArea","padding","imageBackground","props","company","classes","react_default","a","createElement","index_es","className","src","alt","name","variant","concat","position","timeline","technology","description","styles","banner","minHeight","backgroundSize","backgroundAttachment","backgroundRepeat","backgroundPosition","backgroundImage","BannerImage","bannerImage","heading","fontSize","fontWeight","textShadow","top","left","right","transform","Banner","_ref","_ref$component","component","Component","App","appHeader","display","flexDirection","alignItems","fontize","app","profileImage","marginTop","borderRadius","border","Fragment","profile","companies","map","c","key","id","Boolean","window","location","hostname","match","theme","createMuiTheme","typography","useNextVariants","palette","type","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.025248d7.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, Paper } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst CompanyComponent = (props) => {\n  const {\n    company,\n    classes,\n  } = props;\n  return (\n    <Paper className={classes.card}>\n      <div className={classes.imageBackground}>\n        <img src={company.image} alt={company.name} className={classes.image} />\n      </div>\n      <div className={classes.textArea}>\n        <Typography variant=\"h4\" className={classes.content}>{company.name}</Typography>\n        <Typography className={`${classes.content} ${classes.roleStyle}`}>{company.position} {company.timeline}</Typography>\n        <Typography className={classes.content}>{company.technology}</Typography>\n        <Typography className={classes.content}>{company.description}</Typography>\n      </div>\n    </Paper>\n  );\n};\n\nconst styles = {\n    image: {\n        width: '400px',\n        height: '200px',\n        objectFit: 'contain',\n        backgroundColor: '#FFFFFF'\n    },\n    content: {\n        whiteSpace: 'pre-wrap',\n        textAlign: 'initial'\n    },\n    roleStyle: {\n      color: '#09f'\n    },\n    card: {\n        margin: '20px',\n        maxWidth: '1000px'\n    },\n    textArea: {\n      padding: '20px'\n    },\n    imageBackground: {\n      backgroundColor: 'white'\n    }\n}\n\nexport const Company = withStyles(styles)(CompanyComponent);","import React from 'react';\nimport { withStyles } from '@material-ui/core';\nimport BannerImage from './assets/images/olympus.jpg';\n\nconst BannerComponent = ({ component: Component = 'div', classes }) => (\n    <div className={classes.banner}>\n        <Component className={classes.heading} />\n    </div>\n)\n\nconst styles = {\n    banner: {\n        minHeight: 100 + 'vh',\n        backgroundSize: 'cover',\n        backgroundAttachment: 'fixed',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center center',\n        backgroundImage: 'url(' + BannerImage + ')'\n    },\n    bannerImage: {\n        height: '100vh'\n    },\n    heading: {\n      fontSize: 4.8 + 'vw',\n      fontWeight: 300,\n      color: '#fff',\n      textShadow: '0 1px 3px rgba(0,0,0,.7)',\n      top: 50 + '%',\n      position: 'absolute',\n      left: 50 + '%',\n      textAlign: 'center',\n      right: 'auto',\n      width: 90 + '%',\n      transform: 'translateX(-50%) translateY(-50%)',\n      maxWidth: 1170 + 'px'\n    }\n}\n\nexport const Banner = withStyles(styles)(BannerComponent);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Company } from './company.component';\nimport companies from './work.json';\nimport { Banner } from './Banner';\nimport profile from './assets/images/profile.jpg';\n\nexport const AppComponent = (props) => {\n  const { classes } = props;\n  const bannerContent = () => (<React.Fragment>\n    <img src={profile} className={classes.profileImage} alt='Profile' />\n    <Typography variant=\"subtitle1\" className={classes.textShadow}>Hello, I'm</Typography>\n    <Typography variant=\"h1\" className={classes.textShadow}>Cameron Pickle</Typography>\n      <header className={classes.appHeader}>\n\n        <div>\n          {companies.companies.map(c =>\n            <Company key={c.id} company={c} />)}\n        </div>\n      </header>\n</React.Fragment>);\n  return (\n    <div className={classes.app}>\n      <Banner component={bannerContent}>\n      </Banner>\n    </div>\n  );\n}\n\nconst styles = {\n  appHeader: {\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    fontize: 'calc(10px + 2vmin)',\n    color: 'white'\n  },\n  app: {\n    textAlign: 'center'\n  },\n  profileImage: {\n    marginTop: '30vh',\n    borderRadius: '50%',\n    border: '4px solid #09f'\n  },\n  textShadow: {\n    textShadow: '2px 2px #000'\n  }\n}\n\nexport const App = withStyles(styles)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n    palette: {\n      type: 'dark',\n    },\n  });\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/olympus.778e886f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile.7c00b37f.jpg\";"],"sourceRoot":""}
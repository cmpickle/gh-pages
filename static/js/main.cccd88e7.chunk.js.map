{"version":3,"sources":["company.component.js","App.js","serviceWorker.js","index.js"],"names":["Company","withStyles","circle","width","height","borderRadius","objectFit","backgroundColor","content","whiteSpace","textAlign","card","margin","padding","_ref","company","classes","react_default","a","createElement","index_es","className","src","image","alt","name","variant","position","timeline","technology","description","App","appHeader","minHeight","display","flexDirection","alignItems","fontize","color","app","companies","map","c","key","id","Boolean","window","location","hostname","match","theme","createMuiTheme","typography","useNextVariants","palette","type","ReactDOM","render","styles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiCaA,EAAUC,qBAnBR,CACXC,OAAQ,CACJC,MAAO,QACPC,OAAQ,QACRC,aAAc,OACdC,UAAW,UACXC,gBAAiB,WAErBC,QAAS,CACLC,WAAY,WACZC,UAAW,WAEfC,KAAM,CACFC,OAAQ,OACRC,QAAS,OACTV,MAAO,UAIQF,CA7BE,SAAAa,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,QAAZ,OACrBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQL,MACxBM,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAQQ,MAAOC,IAAKT,EAAQU,KAAMJ,UAAWL,EAAQd,SAC/De,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,KAAKL,UAAWL,EAAQR,SAAUO,EAAQU,MAC9DR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQR,SAAUO,EAAQY,SAAjD,IAA4DZ,EAAQa,UACpEX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQR,SAAUO,EAAQc,YACjDZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQR,SAAUO,EAAQe,wBC0B1CC,EAAM9B,qBAfJ,CACb+B,UAAW,CACTzB,gBAAiB,UACjB0B,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,qBACTC,MAAO,SAETC,IAAK,CACH7B,UAAW,WAIIT,CA9BS,SAAAa,GAAiB,IAAdE,EAAcF,EAAdE,QAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQuB,KACtBtB,EAAAC,EAAAC,cAAA,UAAQE,UAAWL,EAAQgB,WACzBf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,aAApB,cACAT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,MAApB,kBACAT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,MAApB,gCAECc,EAAUA,UAAUC,IAAI,SAAAC,GAAC,OACxBzB,EAAAC,EAAAC,cAACnB,EAAD,CAAS2C,IAAKD,EAAEE,GAAI7B,QAAS2B,UCHrBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,yBAAe,CACzBC,WAAY,CACVC,iBAAiB,GAEnBC,QAAS,CACPC,KAAM,UAIZC,IAASC,OACLxC,EAAAC,EAAAC,cAACuC,EAAA,iBAAD,CAAkBR,MAAOA,GACrBjC,EAAAC,EAAAC,cAACY,EAAD,OAEJ4B,SAASC,eAAe,SD6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cccd88e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Paper } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CompanyComponent = ({ company, classes }) => (\r\n    <Paper className={classes.card}>\r\n      <img src={company.image} alt={company.name} className={classes.circle} />\r\n      <Typography variant=\"h4\" className={classes.content}>{company.name}</Typography>\r\n      <Typography className={classes.content}>{company.position} {company.timeline}</Typography>\r\n      <Typography className={classes.content}>{company.technology}</Typography>\r\n      <Typography className={classes.content}>{company.description}</Typography>\r\n    </Paper>\r\n);\r\n\r\nconst styles = {\r\n    circle: {\r\n        width: '400px',\r\n        height: '200px',\r\n        borderRadius: '25px',\r\n        objectFit: 'contain',\r\n        backgroundColor: '#FFFFFF'\r\n    },\r\n    content: {\r\n        whiteSpace: 'pre-wrap',\r\n        textAlign: 'initial'\r\n    },\r\n    card: {\r\n        margin: '20px',\r\n        padding: '20px',\r\n        width: '600px'\r\n    }\r\n}\r\n\r\nexport const Company = withStyles(styles)(CompanyComponent);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Company } from './company.component';\r\nimport companies from './work.json';\r\n\r\nexport const AppComponent = ({ classes }) => {\r\n    return (\r\n      <div className={classes.app}>\r\n        <header className={classes.appHeader}>\r\n          <Typography variant=\"subtitle1\">Hello, I'm</Typography>\r\n          <Typography variant=\"h1\">Cameron Pickle</Typography>\r\n          <Typography variant=\"h4\">Here's what I've been up to:</Typography>\r\n\r\n          {companies.companies.map(c =>\r\n            <Company key={c.id} company={c} />)}\r\n        </header>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n  appHeader: {\r\n    backgroundColor: '#282c34',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    fontize: 'calc(10px + 2vmin)',\r\n    color: 'white'\r\n  },\r\n  app: {\r\n    textAlign: 'center'\r\n  }\r\n}\r\n\r\nexport const App = withStyles(styles)(AppComponent);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n    palette: {\r\n      type: 'dark',\r\n    },\r\n  });\r\n\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={theme}>\r\n        <App />\r\n    </MuiThemeProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}